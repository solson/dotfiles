################################################################################
# Pallette of xterm-256color colors.
################################################################################

def gray(n)
  raise "Invalid argument #{n}" unless (1..23).include?(n)
  231 + n
end

blue       = 110
green      = 66
red        = 217
bright_red = 160
yellow     = 230

################################################################################
# Colorscheme definition.
################################################################################

colorscheme_name = 'solson'

colorscheme = {
  'ColorColumn'    => { bg: gray(4) },
  'Comment'        => { fg: gray(12) },
  'LineNr NonText' => { fg: gray(7) },
  'Normal'         => { bg: gray(3), fg: gray(22) },
  'SpecialComment' => { fg: green },
  'Todo'           => { bg: 'NONE', fg: red },
  'VertSplit'      => { bg: gray(4), fg: gray(4), attr: 'NONE' },
  'Visual'         => { bg: gray(7), fg: 'NONE' },
  'SignColumn'     => { bg: 'NONE' },
  'DiffAdd'        => { bg: 'NONE', fg: green },
  'DiffChange'     => { bg: 'NONE', fg: blue },
  'DiffDelete'     => { bg: 'NONE', fg: red },
  'SpellCap'       => { bg: gray(7), fg: yellow },
  'SpellBad'       => { bg: gray(7), fg: red },
  'Error'          => { bg: 'NONE', fg: bright_red },
  'Identifier'     => { attr: 'NONE' },

  'Character String'                         => { fg: blue },
  'Macro PreCondit PreProc'                  => { fg: yellow },
  'Constant Identifier Type Underlined'      => { fg: 'NONE' },
  'rubyFunction rustFuncName rustIdentifier' => { attr: 'bold' },

  '
    Special Statement StorageClass Structure Typedef rubyClass rubyControl
    rubyDefine rubyInclude rubyInterpolationDelimiter rubyModule
  ' => { fg: gray(16) },
}

links = {
  '
    htmlItalic rustFuncCall rustModPath vimEnvVar vimFgBgAttrib vimHiAttrib
    vimOption
  ' => 'Normal',
}

################################################################################
# Colorscheme generation.
################################################################################

puts <<EOS
" Don't edit this file. It was generated by generate-colorscheme.rb.

" Copyright Â© 2016, Scott Olson <scott@solson.me>
"
" Permission to use, copy, modify, and/or distribute this software for any
" purpose with or without fee is hereby granted, provided that the above
" copyright notice and this permission notice appear in all copies.
"
" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
" REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
" AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
" LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
" OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
" PERFORMANCE OF THIS SOFTWARE.

set background=dark
hi clear

if exists('syntax_on')
  syntax reset
endif

let colors_name = '#{colorscheme_name}'

EOS

colorscheme.each do |groups, options|
  bg = options[:bg]
  fg = options[:fg]
  attr = options[:attr]

  groups.split.each do |group|
    print "hi #{group}"
    print " cterm=#{attr}" if attr
    print " ctermbg=#{bg}" if bg
    print " ctermfg=#{fg}" if fg
    print "\n"
  end
end

links.each do |groups, target|
  groups.split.each do |group|
    puts "hi! link #{group} #{target}"
  end
end
